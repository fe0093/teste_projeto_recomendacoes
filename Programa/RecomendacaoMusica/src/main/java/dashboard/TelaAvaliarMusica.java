/*
Tlea de avaliar musica tem como objetivo o usuario informar uma nota de 0 a 5 
as musicas que não tiverem nota, devera entrar para lista de recomendação.
 */

package dashboard;

import DAO.AvaliacaoDAO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ana Komase
 */
public class TelaAvaliarMusica extends javax.swing.JFrame {
    /**
     * Creates new form TelaAvaliarMusica
     */
 
       private List<Integer> idsAvaliarMusica = new ArrayList<Integer>();
       private List<Avaliacao> avaliacoes = new ArrayList<>();
    
    public TelaAvaliarMusica()  {
        super("Avaliacoes");
        initComponents();
        setLocationRelativeTo(null);
        preencherTabela();
        preencherComboBoxMusica();
//        preencherComboBoxMusicaNota();
    }

    private void preencherTabela() {
        try {
            List<AvaliarMusica> avaliarMusica = DAO.AvaliacaoDAO.obterAvaliacoes();
//            GenerosFavComboBox.setModel(new DefaultComboBoxModel<>(generos.toArray(new Generos[0])));
            DefaultTableModel model;
            model = new DefaultTableModel(new Object[]{"Musicas", "Minha Nota"}, 0);
            //0 é o número de linhas vazias que seriam adicionadas na tabela a partir de
            //uma nova construção da tabela, feita através do new DTM.
            for (AvaliarMusica mf : avaliarMusica) {
                model.addRow(new Object[]{mf.getNome(), mf.getNota()});
            }
            tbAvaliarMusica.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Tente novamente");
        }
    }
    
     private void preencherComboBoxMusica() {
        musicaCombo.removeAllItems();
        //Esse método ele remove do combo o que tinha antes, e vai adicionar novamente.
        //Colocamos esse método para salvar tempo e para não repetir itens quando fosse dar um
        //atualizar na tela.
        idsAvaliarMusica = new ArrayList();
        
        try {
           List<Avaliacao> avaliacoes = DAO.AvaliacaoDAO.obterOutrasAvaliacoes();

            for (Avaliacao a : avaliacoes) {
                musicaCombo.addItem(a.getNome());
                idsAvaliarMusica.add(a.getIdMusica());

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Tente novamente");
        }
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAvaliarMusica = new javax.swing.JTable();
        avaliarButton = new javax.swing.JButton();
        musicaCombo = new javax.swing.JComboBox<>();
        notaCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText(" ↩ ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tbAvaliarMusica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Musicas", "Minha Nota"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbAvaliarMusica);

        avaliarButton.setText("Avaliar");
        avaliarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avaliarButtonActionPerformed(evt);
            }
        });

        notaCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        notaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(musicaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(notaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(avaliarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(musicaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(avaliarButton)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       TelaDashboard td = new TelaDashboard();
            td.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void notaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notaComboActionPerformed

    private void avaliarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avaliarButtonActionPerformed
        
            //        Object --- cast --> String
            String notaComoString = (String)notaCombo.getSelectedItem();
            //String -- conversao --> int
            int nota = Integer.parseInt(notaComoString);
            int index = musicaCombo.getSelectedIndex();
            int idParaAdicionarMusica = idsAvaliarMusica.get(index);
            AvaliacaoDAO.adicionar(idParaAdicionarMusica, nota);
            JOptionPane.showMessageDialog(null, "Nota registrada com sucesso");
//        JOptionPane.showMessageDialog(null, "nota" +nota);
            preencherTabela();
            preencherComboBoxMusica();
        
    }//GEN-LAST:event_avaliarButtonActionPerformed

    /*
    O grande desafio desse rolê é fazer a inserção e atualização na mesma tela.
    Quando o botão de avaliar for apertado, teremos que verificar se o usuário já avaliou aquele dado
    ou seja, chamar a DAO e verificar se aquele registro já existia antes, se a música já foi avaliada.
    SE SIM - deveremos fazer um update no banco
    SE NÃO - deveremos fazer um insert no banco
    TODO RESTO é IGUAL ao que fizemos na tela e nos combos de GeneroFavorito
    */
//   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
     
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAvaliarMusica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton avaliarButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> musicaCombo;
    private javax.swing.JComboBox<String> notaCombo;
    private javax.swing.JTable tbAvaliarMusica;
    // End of variables declaration//GEN-END:variables


}
